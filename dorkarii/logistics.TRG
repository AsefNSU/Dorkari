TYPE=TRIGGERS
triggers='CREATE DEFINER=`root`@`localhost` TRIGGER before_insert_logistics\nBEFORE INSERT ON Logistics\nFOR EACH ROW\nBEGIN\n    SET NEW.logistics_id = CONCAT(NEW.logistics_name, \'-\', NEW.item_duplicacy_serial, \'-\', DATE_FORMAT(NEW.import_date, \'%Y%m%d\'));\nEND' 'CREATE DEFINER=`root`@`localhost` TRIGGER generate_logistics_id\nBEFORE INSERT ON Logistics\nFOR EACH ROW\nBEGIN\n    DECLARE serial_no INT;\n\n    -- Get the current count of entries for the same logistics_name on the same import_date\n    SELECT COUNT(*) + 1 INTO serial_no\n    FROM Logistics\n    WHERE logistics_name = NEW.logistics_name\n    AND import_date = NEW.import_date;\n\n    -- Generate logistics_id using serial_no, logistics_name, and import_date\n    SET NEW.logistics_id = CONCAT(serial_no, \'_\', NEW.logistics_name, \'_\', NEW.import_date);\nEND' 'CREATE DEFINER=`root`@`localhost` TRIGGER update_input_qty\nBEFORE INSERT ON Logistics\nFOR EACH ROW\nBEGIN\n    DECLARE existing_logistics_id VARCHAR(100);\n\n    -- Check if logistics_id already exists\n    SELECT logistics_id INTO existing_logistics_id\n    FROM Logistics\n    WHERE logistics_name = NEW.logistics_name\n    AND import_date = NEW.import_date\n    LIMIT 1;\n\n    -- If logistics_id exists, update input_qty instead of inserting a new row\n    IF existing_logistics_id IS NOT NULL THEN\n        UPDATE Logistics\n        SET input_qty = input_qty + NEW.input_qty\n        WHERE logistics_id = existing_logistics_id;\n\n        -- Prevent duplicate insertion\n        SET NEW.logistics_id = NULL;\n    END IF;\nEND' 'CREATE DEFINER=`root`@`localhost` TRIGGER insert_item_on_confirmation\nAFTER INSERT ON Logistics\nFOR EACH ROW\nBEGIN\n    IF NEW.item_confirmation = \'Yes\' THEN\n        INSERT INTO Item (item_id, item_name, available_qty, importing_date)\n        VALUES (NEW.logistics_id, NEW.logistics_name, NEW.available_qty, NEW.import_date);\n    END IF;\nEND' 'CREATE DEFINER=`root`@`localhost` TRIGGER update_logistics_count_day\nAFTER INSERT ON Logistics\nFOR EACH ROW\nBEGIN\n    UPDATE Branch\n    SET total_logistics_input_day = (\n        SELECT COUNT(*) FROM Logistics \n        WHERE branch_id = NEW.branch_id AND import_date = NEW.import_date\n    )\n    WHERE branch_id = NEW.branch_id;\nEND' 'CREATE DEFINER=`root`@`localhost` TRIGGER update_logistics_count_month\nAFTER INSERT ON Logistics\nFOR EACH ROW\nBEGIN\n    UPDATE Branch\n    SET total_logistics_input_month = (\n        SELECT COUNT(*) FROM Logistics \n        WHERE branch_id = NEW.branch_id \n        AND MONTH(import_date) = MONTH(NEW.import_date) \n        AND YEAR(import_date) = YEAR(NEW.import_date)\n    )\n    WHERE branch_id = NEW.branch_id;\nEND' 'CREATE DEFINER=`root`@`localhost` TRIGGER update_available_qty\nAFTER INSERT ON Logistics\nFOR EACH ROW\nBEGIN\n    -- Update available_qty for all rows with the same logistics_name\n    UPDATE Logistics l1\n    SET available_qty = (\n        SELECT SUM(input_qty) - SUM(used_qty)\n        FROM Logistics l2\n        WHERE l2.logistics_name = l1.logistics_name\n    )\n    WHERE l1.logistics_name = NEW.logistics_name;\nEND' 'CREATE DEFINER=`root`@`localhost` TRIGGER update_branch_expense\nAFTER INSERT ON Logistics\nFOR EACH ROW\nBEGIN\n    -- Update total_expense_day\n    UPDATE Branch\n    SET total_expense_day = (\n        SELECT SUM(purchase_price_total)\n        FROM Logistics\n        WHERE import_date = NEW.import_date\n        AND branch_id = NEW.branch_id\n    )\n    WHERE branch_id = NEW.branch_id;\n\n    -- Update total_expense_month\n    UPDATE Branch\n    SET total_expense_month = (\n        SELECT SUM(purchase_price_total)\n        FROM Logistics\n        WHERE MONTH(import_date) = MONTH(NEW.import_date)\n        AND YEAR(import_date) = YEAR(NEW.import_date)\n        AND branch_id = NEW.branch_id\n    )\n    WHERE branch_id = NEW.branch_id;\nEND' 'CREATE DEFINER=`root`@`localhost` TRIGGER update_item_id \nAFTER INSERT ON Logistics\nFOR EACH ROW\nBEGIN\n    -- Check if item_confirmation is \'Yes\' in the new row inserted\n    IF NEW.item_confirmation = \'Yes\' THEN\n        -- Insert the logistics_id into the Item table as item_id when confirmation is \'Yes\'\n        INSERT INTO Item (item_id, available_qty, item_name, importing_date)\n        VALUES (NEW.logistics_id, NEW.input_qty, NEW.logistics_name, NEW.import_date);\n    END IF;\nEND' 'CREATE DEFINER=`root`@`localhost` TRIGGER update_available_qty_item\nAFTER UPDATE ON Logistics\nFOR EACH ROW\nBEGIN\n    IF NEW.item_confirmation = \'Yes\' THEN\n        UPDATE Item \n        SET available_qty = NEW.available_qty\n        WHERE item_id = NEW.logistics_id;\n    END IF;\nEND' 'CREATE DEFINER=`root`@`localhost` TRIGGER update_available_qty_on_update\nAFTER UPDATE ON Logistics\nFOR EACH ROW\nBEGIN\n    -- Update available_qty for all rows with the same logistics_name\n    UPDATE Logistics l1\n    SET available_qty = (\n        SELECT SUM(input_qty) - SUM(used_qty)\n        FROM Logistics l2\n        WHERE l2.logistics_name = l1.logistics_name\n    )\n    WHERE l1.logistics_name = NEW.logistics_name;\nEND'
sql_modes=1098907648 1098907648 1098907648 1098907648 1098907648 1098907648 1098907648 1098907648 1098907648 1098907648 1098907648
definers='root@localhost' 'root@localhost' 'root@localhost' 'root@localhost' 'root@localhost' 'root@localhost' 'root@localhost' 'root@localhost' 'root@localhost' 'root@localhost' 'root@localhost'
client_cs_names='utf8mb4' 'utf8mb4' 'utf8mb4' 'utf8mb4' 'utf8mb4' 'utf8mb4' 'utf8mb4' 'utf8mb4' 'utf8mb4' 'utf8mb4' 'utf8mb4'
connection_cl_names='utf8mb4_unicode_ci' 'utf8mb4_unicode_ci' 'utf8mb4_unicode_ci' 'utf8mb4_unicode_ci' 'utf8mb4_unicode_ci' 'utf8mb4_unicode_ci' 'utf8mb4_unicode_ci' 'utf8mb4_unicode_ci' 'utf8mb4_unicode_ci' 'utf8mb4_unicode_ci' 'utf8mb4_unicode_ci'
db_cl_names='utf8mb4_general_ci' 'utf8mb4_general_ci' 'utf8mb4_general_ci' 'utf8mb4_general_ci' 'utf8mb4_general_ci' 'utf8mb4_general_ci' 'utf8mb4_general_ci' 'utf8mb4_general_ci' 'utf8mb4_general_ci' 'utf8mb4_general_ci' 'utf8mb4_general_ci'
created=1741944697436798 1741979007280055 1741979017820337 1741968319616263 1741970700692669 1741970710912452 1741976271466867 1741976867739526 1741978749920400 1741968329414496 1741976278490448
